package com.leetcode.greedy_algorithm;

import com.leetcode.binary_tree.TreeNode;

public class BinaryTreeCameras {
    /**
     * 力扣题目链接：https://leetcode-cn.com/problems/binary-tree-cameras
     *
     * 给定一个二叉树，我们在树的节点上安装摄像头。
     *
     * 节点上的每个摄影头都可以监视其父对象、自身及其直接子对象。
     *
     * 计算监控树的所有节点所需的最小摄像头数量。
     *
     * 示例 1：
     *
     * 图片
     * 输入：[0,0,null,0,0]
     * 输出：1
     * 解释：如图所示，一台摄像头足以监控所有节点。
     * 示例 2：
     *
     * 图片
     * 输入：[0,0,null,0,null,0,null,null,0]
     * 输出：2
     * 解释：需要至少两个摄像头来监视树的所有节点。上图显示了摄像头放置的有效位置之一。
     * 提示：
     *
     * 给定树的节点数的范围是 [1, 1000]。
     * 每个节点的值都是 0。
     */




    /**
     * 因为头结点放不放摄像头也就省下一个摄像头， 叶子节点放不放摄像头省下了的摄像头数量是指数阶别的。
     * 所以我们要从下往上看，局部最优：让叶子节点的父节点安摄像头，所用摄像头最少，整体最优：全部摄像头数量所用最少！
     *
     * 对于任意一个节点，他的状态只能为3种：
     *      该节点未被监控到（用0表示）、该节点被放置摄像头（1）、该节点已被监控到（用2表示）
     *  空节点，是已被监控的状态（0），只有这样子，就可以在叶子节点的父节点上放置摄像头
     */

    int num = 0;

    public int minCameraCover(TreeNode root) {
        // 特殊处理：情况4、头结点，没有被覆盖。但是头结点没法在递归中进行处理。所以要在调用处处理判断。
        if (traversal(root) == 0) {
            num++;
        }
        return num;
    }

    // 后续遍历
    public int traversal(TreeNode root) {
        if (root == null) {
            return 2;
        }

        int left = traversal(root.left); // 左
        int right = traversal(root.right); // 右

        // 分情况处理根节点
        // 情况1、左右节点都有覆盖（被监控）。 那么此时中间的父节点就是无覆盖状态（0）
        // 这时，不应该在此处放置摄像头。应该在中间父节点的父节点放置，这样才能达到最小个数摄像头监视尽可能多的节点
        if (left == 2 && right == 2) {
            return 0;
        }
        // 情况2、左右节点中至少有一个无覆盖。那么这种时候，中间父节点，应该放置摄像头
        // 2.1 左、右都无覆盖（0）
        // 2.2 左边有摄像头（1）、右边无覆盖（0）
        // 2.3 左边无覆盖(0)、右边有摄像头（1）
        // 2.4 左边被覆盖（2），右边无覆盖（0）
        // 2.5 左边无覆盖（0）、右边被覆盖（2）
        if (left == 0 || right == 0) {
            num++;
            return 1;
        }
        // 情况3、左右节点，至少有一个是安装了摄像头。这时候中间父节点是被覆盖状态（2）,不需要安装摄像头
        if (left == 1 || right == 1) {
            return 2;
        }
        // 情况4、头结点，没有被覆盖。但是头结点没法在递归中进行处理。所以要在调用处处理判断。

        return -1;   // 不会走到这里
    }
}
