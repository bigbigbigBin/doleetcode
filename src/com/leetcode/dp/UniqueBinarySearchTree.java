package dp;

public class UniqueBinarySearchTree {

    /**
     * 力扣题目链接：https://leetcode-cn.com/problems/unique-binary-search-trees
     *
     * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
     *
     *
     * 示例 1：
     * 输入：n = 3
     * 输出：5
     *
     * 示例 2：
     * 输入：n = 1
     * 输出：1
     * */

    // 来看看n为3的时候，有哪几种情况。
    //
    //当1为头结点的时候，其右子树有两个节点，看这两个节点的布局，是不是和 n 为2的时候两棵树的布局是一样的啊！
    //
    //（可能有同学问了，这布局不一样啊，节点数值都不一样。别忘了我们就是求不同树的数量，并不用把搜索树都列出来，所以不用关心其具体数值的差异）
    //
    //当3为头结点的时候，其左子树有两个节点，看这两个节点的布局，是不是和n为2的时候两棵树的布局也是一样的啊！
    //
    //当2为头结点的时候，其左右子树都只有一个节点，布局是不是和n为1的时候只有一棵树的布局也是一样的啊！
    //
    //发现到这里，其实我们就找到了重叠子问题了，其实也就是发现可以通过dp[1] 和 dp[2] 来推导出来dp[3]的某种方式。


    // dp[i] 表示 有i个节点所组成的互不相同的二叉搜索树的个数
    // dp[i] = sum(dp[以j为头结点的左子树的节点数量] * dp[以j为头节点的右子树的节点数量])   1<=j<=i
    //       = sum(dp[j-1] * dp[i-j])
    // dp[0] = 0  dp[1] = 1  dp[2] = 2

    public int numTrees(int n) {
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n ; i++) {
            for (int j = 1; j<= i; j++) {
                dp[i] += dp[j-1] * dp[i-j];
            }
        }
        return dp[n];
    }

}
