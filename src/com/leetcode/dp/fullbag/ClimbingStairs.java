package com.leetcode.dp.fullbag;

public class ClimbingStairs {
    /**
     * 链接：https://leetcode-cn.com/problems/climbing-stairs/
     *
     * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
     *
     * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
     *
     * 注意：给定 n 是一个正整数。
     *
     * 示例 1：
     * 输入：2
     * 输出：2
     * 解释：有两种方法可以爬到楼顶。
     *
     * 1 阶 + 1 阶
     * 2 阶
     * 示例 2：
     * 输入：3
     * 输出：3
     * 解释：有三种方法可以爬到楼顶。
     *
     * 1 阶 + 1 阶 + 1 阶
     * 1 阶 + 2 阶
     * 2 阶 + 1 阶
     *
     * ############# 题目再进化 #############
     * 改为：每次可以爬 1 、 2或者m 个台阶。问有多少种不同的方法可以爬到楼顶呢？
     *
     * 1阶，2阶，m阶就是物品，楼顶就是背包。
     *
     * 每一阶可以重复使用，例如跳了1阶，还可以继续跳1阶。
     *
     * 问跳到楼顶有几种方法：其实就是问装满背包有几种方法。
     * 而且，这还是一个完全背包问题！
     */
    // nums[j] 表示有一次可以跳j阶
    // 1、dp[i]：爬到有i个台阶的楼顶，有dp[i]种方法。
    // 2、dp[i] = dp[i] +  dp[i - nums[j]]
    // 3、dp[0] = 1
    //    这是背包里求排列问题：
    //    即：1、2 步  和 2、1 步都是上三个台阶，但是这两种方法不同
    // 4、所以背包容量在外层，物品在内层。
}
